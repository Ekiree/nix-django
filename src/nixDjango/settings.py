"""
Django settings for nixDjango project.

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY") or (
    "django-insecure-o@c!ajyk9l-+azpl&1l_xnb%7j_f)$-d9*kh8yeu^w20)hd7(c"
)

# SECURITY WARNING: don't run with debug turned on in production!
if os.getenv("DJANGO_PRODUCTION"):
    DEBUG = False
else:
    DEBUG = True

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "whitenoise.runserver_nostatic",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "nixDjango.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "nixDjango.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DB_PROVIDER = os.getenv("DB_PROVIDER")

if DB_PROVIDER == "sqlite":
    DB_NAME = os.getenv("DB_NAME")
    DB_AUTH = os.getenv("DB_AUTH_TOKEN")

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "libsql://%s.turso.io?authToken=%s" % (DB_NAME, DB_AUTH),
            'TEST': {
                'NAME': BASE_DIR / 'db.sqlite3',
            },
        }
    }
elif DB_PROVIDER == "sql":
    DB_NAME = os.getenv('DB_NAME')
    DB_USER = os.getenv('DB_USER')
    DB_PASSWORD = os.getenv('DB_PASSWORD')
    DB_HOST = os.getenv('DB_HOST') or 'localhost'

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'HOST': DB_HOST,
            'PORT': '3306',
            'TEST': {
                'NAME': 'test',
            },
            'OPTIONS': {'charset': 'utf8'},
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# Location of static files within applications in Django source code
STATIC_URL = '/static/'
# Location of static files the server should pull from while running
STATIC_ROOT = os.getenv('POETFOLIO_STATIC') or '/srv/static'
# https://https://whitenoise.readthedocs.io/en/latest/django.html
WHITENOISE_INDEX_FILE = "True"


# Media files (User uploaded content)
USE_CLOUD_MEDIA = os.getenv("USE_CLOUD_MEDIA") == 'TRUE'

if USE_CLOUD_MEDIA:
    MEDIA_CONFIG = {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "bucket_name": os.getenv("BUCKET_NAME"),
            "default_acl": "private",
            "signature_version": "s3v4",
            "endpoint_url": os.getenv("BUCKET_ENDPOINT"),
            "access_key": os.getenv("ACCESS_KEY"),
            "secret_key": os.getenv("SECRET_KEY"),
        }
    }
else:
    MEDIA_CONFIG = {
        'BACKEND': 'django.core.files.storage.FileSystemStorage',
    }

# Default Media Files
# Location of media files within appllications  in Django source Code
MEDIA_URL = '/media/'
# Location of media files the server should pull from while running
import getpass
username = getpass.getuser()
MEDIA_ROOT = os.getenv('POETFOLIO_MEDIA') or (
         	'/home/' + username + '/media')

STORAGES = {
    "default": MEDIA_CONFIG,
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


# login/logout
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


# Emails
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST') or ''
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv('EMAIL_USER') or ''
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASSWORD') or ''
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = os.getenv('FROM_EMAIL') or ''
SECURITY_EMAIL_SENDER = DEFAULT_FROM_EMAIL
SERVER_EMAIL = DEFAULT_FROM_EMAIL
LOGIN_URL = '/login/'

# Forces django to use temporary files for uploads
FILE_UPLOAD_HANDLERS = [ 'django.core.files.uploadhandler.TemporaryFileUploadHandler' ]

# Set default Values when creating objects
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
